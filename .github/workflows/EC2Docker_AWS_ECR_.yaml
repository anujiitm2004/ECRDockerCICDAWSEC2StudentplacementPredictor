name: "CI/CD Pipeline Build then Push to AWS ECR then Deploy to EC2"

on:
  push:
    branches:
      - master

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # replace with your region

      # Step 3: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build Docker image and tag it with ECR repo URI
      - name: Build, Tag, and Push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mymlapp
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 5: SSH into EC2 and deploy
      - name: Deploy on EC2 from ECR
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/mymlapp:latest
            docker stop mymlapp || true
            docker rm mymlapp || true
            docker run -d -p 3000:5000 --name mymlapp ${{ steps.login-ecr.outputs.registry }}/mymlapp:latest
